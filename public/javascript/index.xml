<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascripts on Qml Book</title>
    <link>https://mirrors.cqu.edu.cn/qmlbook/javascript/</link>
    <description>Recent content in Javascripts on Qml Book</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://mirrors.cqu.edu.cn/qmlbook/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://mirrors.cqu.edu.cn/qmlbook/javascript/browserhtml_vs_qtquickqml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mirrors.cqu.edu.cn/qmlbook/javascript/browserhtml_vs_qtquickqml/</guid>
      <description>浏览器/HTML与QtQuick/QML对比（Browser/HTML vs QtQuick/QML） #  浏览器在运行时渲染HTML，执行HTML中相关的JavaScript。现今的web应用中相对于HTML包含了更多的JavaScript。浏览器中JavaScript运行在一些浏览器附加的标准ECMAScript环境。一个典型的浏览器中的JS环境知道访问浏览器窗口的窗口对象。也简单的基于JQuery的DOM选择器来提供CSS选择器。额外使用setTimeout函数在超时时调用函数。除了这些，JS存在于一个标准的JavaScript环境，类似于QML/JS。
不同的是JS出现在HTML与QML中的方式。在HTML中，你只能在事件操作（event handlers），例如页面加载（page loaded），鼠标点击（mouse pressed）中添加JS。例如通常在页面加载中初始化你的JS，这在QML中与组件加载完成（Component.onCompleted）类似。例如你不能使用JS来绑定属性（至少不是直接绑定，AngularJS增强了DOM树允许这种操作，但这和典型HTML相去甚远）。
所以在QML中JS是一种更加优秀的语言，并且与QML的渲染树高度集成。使得语言更具有可读性。除了这些，开发过HTML/JS应用程序的人会觉得在QML/JS中开发非常容易上手。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mirrors.cqu.edu.cn/qmlbook/javascript/creating_a_js_console/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mirrors.cqu.edu.cn/qmlbook/javascript/creating_a_js_console/</guid>
      <description>创建JS控制台（Creating a JS Console） #  下面这个小的例子我们将创建一个JS控制台。我们需要一个输入区域允许用户输入表达式，和一个结果输出列表。由于这更像一个桌面应用程序，我们使用QtQuick控制模块。
注意
在你下一个项目中包含一个JS控制台可以更好的用来测试。增加Quake-Terminal效果也有助于对你的客户留下更好的印象。为了更好的使用它，你需要评估JS控制台的控制范围，例如当前可见屏幕，核心数据模型，一个单例对象或者其它的东西。
 我们在Qt Creator中使用QtQuick controls创建一个Qt Quick UI项目。把这个项目取名为JSConsole。完成引导后，我们已经有了一个基础的应用程序框架，这个框架包含一个应用程序窗口和一个菜单。
我们使用一个TextFiled来输入文本，使用一个Button来对输入求值。表达式求值结果使用一个机遇链表模型（ListModel）的链表视图（ListView）显示，每一个链表项使用两个标签显示表达式和求值结果。
// part of JSConsole.qml ApplicationWindow { id: root ... ColumnLayout { anchors.fill: parent anchors.margins: 9 RowLayout { Layout.fillWidth: true TextField { id: input Layout.fillWidth: true focus: true onAccepted: { // call our evaluation function on root root.jsCall(input.text) } } Button { text: qsTr(&amp;#34;Send&amp;#34;) onClicked: { // call our evaluation function on root root.jsCall(input.text) } } } Item { Layout.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mirrors.cqu.edu.cn/qmlbook/javascript/js_objects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mirrors.cqu.edu.cn/qmlbook/javascript/js_objects/</guid>
      <description>JS对象（JS Objects） #  在使用JS工作时，有一些对象和方法会被频繁的使用。下面是它们的一个小的集合。
 Math.floor(v),Math.ceil(v),Math.round(v) - 从浮点数获取最大，最小和随机整数 Math.random() - 创建一个在0到1之间的随机数 Object.keys(o) - 获取对象的索引值（包括QObject） JSON.parse(s), JSON.stringify(o) - 转换在JS对象和JSON字符串 Number.toFixed(p) - 修正浮点数精度 Date - 日期时间操作  你可以可以在这里找到它们的使用方法：JavaScript reference
You can find them also at: JavaScript reference
下面有一些简单的例子演示了如何在QML中使用JS。会给你一些如何在QML中使用JS一些启发。
打印所有项的键（Print all keys from QML Item）
Item { id: root Component.onCompleted: { var keys = Object.keys(root); for(var i=0; i&amp;lt;keys.length; i++) { var key = keys[i]; // prints all properties, signals, functions from object console.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mirrors.cqu.edu.cn/qmlbook/javascript/README/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mirrors.cqu.edu.cn/qmlbook/javascript/README/</guid>
      <description>JavaScript #  JavaScript是web客户端开发的通用语言。基于node js它也开始引导web服务器的开发。因此它使非常适合在声明式QML语言上添加的命令性语言。QML本身作为一个申明式语言用于表达用户界面层次，但是这仅限于表达操作。有时你需要一个方法表达业务，使用JavaScript来完成。
注意
在Qt社区有一个开放性的问题是在目前Qt程序中关于混合使用QML/JS/QtC++的正确性。通常建议的混合方式是在你的应用程序中将JS部分限制在最小，将你的业务逻辑部分放在QtC++中，UI逻辑放在QML/JS中。
这本书趋向这种边界的划分，通常对于一个产品的开发这不一定是正确的混合方式，不是对于所有人都适用。最重要的是根据你的团队技能和个人品味而定。在接受推荐的时候保持你的怀疑。
下面有一个简短的例子是关于如何在QML中混合适用JS：
Button { width: 200 height: 300 property bool toggle: false text: &amp;#34;Click twice to exit&amp;#34; // JS function function doToggle() { toggle = !toggle } onTriggered: { // this is JavaScript doToggle(); if(toggle) { Qt.quit() } } } 因此在QML中JavaScript作为一个单独的JS函数，作为一个JS模块可以在很多地方使用，它可以与每一个右边的属性绑定。
import &amp;#34;util.js&amp;#34; as Util // import a pure JS module Button { width: 200 height: width*2 // JS on the right side of property binding // standalone function (not really useful) function log(msg) { console.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mirrors.cqu.edu.cn/qmlbook/javascript/the_language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mirrors.cqu.edu.cn/qmlbook/javascript/the_language/</guid>
      <description>JavaScript语法（The Language） #  这章不会对JavaScript作详细的介绍。有其它的书可以参考，请访问 Mozilla Developer Network
JavaScript表面上是一种非常通用的语言，与许多其它语言没有什么不同：
function countDown() { for(var i=0; i&amp;lt;10; i++) { console.log(&amp;#39;index: &amp;#39; + i) } } function countDown2() { var i=10; while( i&amp;gt;0 ) { i--; } } 但是注意JS有函数作用域，没有C++中的块作用域（查看 Functions and function scope）。
语句if &amp;hellip; else，break，continue也可以使用。switch相对于C++中只可以切换整数值，JavaScript可以切换其它类型的值：
function getAge(name) { // switch over a string switch(name) { case &amp;#34;father&amp;#34;: return 58; case &amp;#34;mother&amp;#34;: return 56; } return unknown; } JS可以将几种值认为是false，如false，0，“”，undefined，null。例如一个函数范围默认值undefined。使用‘===’操作符验证是否为false。‘==’等于操作将会对类型转换做验证。如果条件允许，直接使用等于操作符‘===’可以更快更好的验证一致性（查看 Comparison operators）。
在JavaScript底层有它自己的实现方式，例如数组：
function doIt() { var a = [] // empty arrays a.</description>
    </item>
    
  </channel>
</rss>
